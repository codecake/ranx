<!--

    ranx - general purpose reactive language
    Copyright (C) 2012  codec4ke@gmail.com

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, version 3 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<project name="ranx" default="build" basedir=".">
	<property name="parser.src" location="antlr"/>
	<property name="bld.dir" location="bld"/>
	
	<!-- root of the generated *.java hierarchy -->
	<property name="parser.root" location="bld/parser"/>
	
	<!-- where the generated java files go -->
	<property name="parser.dir" location="bld/parser/org/ranx/parser"/>
	
	<property name="java.src.dir" location="src"/>
	<property name="core.src.dir" location="src/org/ranx/core"/>
	<property name="runner.src.dir" location="src/org/ranx/runner"/>
	<property name="java.out.dir" location="bld/classes"/>
	<property name="lib.dir" location="lib"/>
	
	<path id="project.class.path">
		<!--pathelement path="${classpath}"/-->
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${java.out.dir}"/>
	</path>
	
	<target name="build" depends="compile.core, compile.parser">
	</target>
	
	<target name="init">
		<mkdir dir="${bld.dir}"/>
		<mkdir dir="${parser.root}"/>
		<mkdir dir="${parser.dir}"/>
		<mkdir dir="${java.out.dir}"/>
	</target>
	
	<!-- check if we need to run ANTLR, set parser.up.to.date if we don't -->
	<target name="check.parser.files">
		<dependset>
			<srcfileset dir="${parser.src}" includes = "*.g" />
			<targetfileset dir="${parser.dir}" includes = "*"/>
		</dependset>
		<available property="parser.up.to.date" file="${parser.dir}/Ranx.tokens" />
	</target>
	
	<!-- runs ANTLR, if needed -->
	<target name="generate.parser" depends="init, check.parser.files" unless="parser.up.to.date">
		<java classname="org.antlr.Tool">
			<classpath refid="project.class.path"/>
			<arg value="-o"/>
			<arg value="${parser.dir}"/>
			<arg value="${parser.src}/Ranx.g"/>
			<arg value="${parser.src}/Eval.g"/>
		</java>
	</target>
	
	<target name="clean">
		<delete dir="${bld.dir}" />
	</target>
	
	<target name="compile" depends="init, compile.runner">
	</target>
	
	<!-- compile core library - this is required to compile parser -->
	<target name="compile.core" depends="init">
		<javac 
			srcdir="${java.src.dir}"
			includes="org/ranx/core/**"
			destdir="${java.out.dir}" 
			includeAntRuntime="false"
			debug="on"
		>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile.parser" depends="init, generate.parser, compile.core">
		<javac 
			srcdir="${parser.root}" 
			includes="org/ranx/parser/**"
			destdir="${java.out.dir}" 
			includeAntRuntime="false"
			debug="on"
		>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="compile.runner" depends="compile.core, compile.parser">
		<javac 
			srcdir="${java.src.dir}" 
			includes="org/ranx/runner/**"
			destdir="${java.out.dir}" 
			includeAntRuntime="false"
			debug="on"
		>
			<classpath refid="project.class.path"/>
		</javac>
	</target>
	
	<target name="test" depends="compile">
		<junit 
			haltonerror="true" 
			haltonfailure="true">
			<classpath refid="project.class.path"/>
			<batchtest>
 				<formatter type="brief" usefile="false"/>
 				<fileset dir="${java.out.dir}">
					<include name="**/*Test.class"/>
				</fileset>
			</batchtest>
		</junit>
		
	</target>
	
	<target name="repl" depends="compile">
		<java classname="org.ranx.Runner" fork="true">
			<classpath refid="project.class.path"/>
		</java>
	</target>

</project>
